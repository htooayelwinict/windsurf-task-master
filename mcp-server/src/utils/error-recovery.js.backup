/**
 * Error recovery utilities for the Windsurf Task Master MCP server
 * Provides mechanisms to recover from communication errors
 */

import { logger } from './logger.js';
import { createJsonRpcErrorResponse } from './message-handler.js';

/**
 * Maximum number of consecutive errors before forcing a restart
 * @type {number}
 */
const MAX_CONSECUTIVE_ERRORS = 5;

/**
 * Counter for consecutive errors
 * @type {number}
 */
let consecutiveErrorCount = 0;

/**
 * Handle a communication error and attempt recovery
 * @param {Error} error - The error that occurred
 * @param {number|string} requestId - The ID of the request that caused the error
 * @returns {string|null} - Error response to send, or null if recovery failed
 */
export function handleCommunicationError(error, requestId = 0) {
    logger.error(`Communication error: ${error.message}`);
    
    // Increment consecutive error count
    consecutiveErrorCount++;
    
    // Log warning if approaching restart threshold
    if (consecutiveErrorCount > MAX_CONSECUTIVE_ERRORS - 2) {
        logger.warn(`Approaching error threshold (${consecutiveErrorCount}/${MAX_CONSECUTIVE_ERRORS})`);
    }
    
    // Check if we need to force a restart
    if (consecutiveErrorCount >= MAX_CONSECUTIVE_ERRORS) {
        logger.error(`Error threshold reached (${consecutiveErrorCount}/${MAX_CONSECUTIVE_ERRORS}). Server should be restarted.`);
        // In a production environment, we might want to trigger an automatic restart here
        // For now, we'll just log the error and continue
    }
    
    // Create an error response
    try {
        return createJsonRpcErrorResponse(
            requestId,
            -32603,
            `Internal error: ${error.message}`
        );
    } catch (responseError) {
        logger.error(`Failed to create error response: ${responseError.message}`);
        return null;
    }
}

/**
 * Reset the consecutive error count after successful communication
 */
export function resetErrorCount() {
    if (consecutiveErrorCount > 0) {
        logger.info(`Resetting error count from ${consecutiveErrorCount} to 0`);
        consecutiveErrorCount = 0;
    }
}

/**
 * Get the current consecutive error count
 * @returns {number} - The current consecutive error count
 */
export function getErrorCount() {
    return consecutiveErrorCount;
}

export default {
    handleCommunicationError,
    resetErrorCount,
    getErrorCount
};
